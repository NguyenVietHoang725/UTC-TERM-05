#BlueJ class context
comment0.target=BTree
comment0.text=\r\n\ \ The\ {@code\ BTree}\ class\ represents\ an\ ordered\ symbol\ table\ of\ generic\r\n\ \ key-value\ pairs.\r\n\ \ It\ supports\ the\ <em>put</em>,\ <em>get</em>,\ <em>contains</em>,\r\n\ \ <em>size</em>,\ and\ <em>is-empty</em>\ methods.\r\n\ \ A\ symbol\ table\ implements\ the\ <em>associative\ array</em>\ abstraction\:\r\n\ \ when\ associating\ a\ value\ with\ a\ key\ that\ is\ already\ in\ the\ symbol\ table,\r\n\ \ the\ convention\ is\ to\ replace\ the\ old\ value\ with\ the\ new\ value.\r\n\ \ Unlike\ {@link\ java.util.Map},\ this\ class\ uses\ the\ convention\ that\r\n\ \ values\ cannot\ be\ {@code\ null}\u2014setting\ the\r\n\ \ value\ associated\ with\ a\ key\ to\ {@code\ null}\ is\ equivalent\ to\ deleting\ the\ key\r\n\ \ from\ the\ symbol\ table.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ a\ B-tree.\ It\ requires\ that\r\n\ \ the\ key\ type\ implements\ the\ {@code\ Comparable}\ interface\ and\ calls\ the\r\n\ \ {@code\ compareTo()}\ and\ method\ to\ compare\ two\ keys.\ It\ does\ not\ call\ either\r\n\ \ {@code\ equals()}\ or\ {@code\ hashCode()}.\r\n\ \ The\ <em>get</em>,\ <em>put</em>,\ and\ <em>contains</em>\ operations\r\n\ \ each\ make\ log<sub><em>m</em></sub>(<em>n</em>)\ probes\ in\ the\ worst\ case,\r\n\ \ where\ <em>n</em>\ is\ the\ number\ of\ key-value\ pairs\r\n\ \ and\ <em>m</em>\ is\ the\ branching\ factor.\r\n\ \ The\ <em>size</em>,\ and\ <em>is-empty</em>\ operations\ take\ constant\ time.\r\n\ \ Construction\ takes\ constant\ time.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\r\n\ \ <a\ href\="https\://algs4.cs.princeton.edu/62btree">Section\ 6.2</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n
comment1.params=
comment1.target=BTree()
comment1.text=\r\n\ Initializes\ an\ empty\ B-tree.\r\n
comment10.params=
comment10.target=java.lang.String\ toString()
comment10.text=\r\n\ Returns\ a\ string\ representation\ of\ this\ B-tree\ (for\ debugging).\r\n\r\n\ @return\ a\ string\ representation\ of\ this\ B-tree.\r\n
comment11.params=h\ ht\ indent
comment11.target=java.lang.String\ toString(BTree.Node,\ int,\ java.lang.String)
comment12.params=k1\ k2
comment12.target=boolean\ less(java.lang.Comparable,\ java.lang.Comparable)
comment13.params=k1\ k2
comment13.target=boolean\ eq(java.lang.Comparable,\ java.lang.Comparable)
comment14.params=args
comment14.target=void\ main(java.lang.String[])
comment14.text=\r\n\ Unit\ tests\ the\ {@code\ BTree}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment2.params=
comment2.target=boolean\ isEmpty()
comment2.text=\r\n\ Returns\ true\ if\ this\ symbol\ table\ is\ empty.\r\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ is\ empty;\ {@code\ false}\ otherwise\r\n
comment3.params=
comment3.target=int\ size()
comment3.text=\r\n\ Returns\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table.\r\n\ @return\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table\r\n
comment4.params=
comment4.target=int\ height()
comment4.text=\r\n\ Returns\ the\ height\ of\ this\ B-tree\ (for\ debugging).\r\n\r\n\ @return\ the\ height\ of\ this\ B-tree\r\n
comment5.params=key
comment5.target=java.lang.Object\ get(java.lang.Comparable)
comment5.text=\r\n\ Returns\ the\ value\ associated\ with\ the\ given\ key.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ the\ value\ associated\ with\ the\ given\ key\ if\ the\ key\ is\ in\ the\ symbol\ table\r\n\ \ \ \ \ \ \ \ \ and\ {@code\ null}\ if\ the\ key\ is\ not\ in\ the\ symbol\ table\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment6.params=x\ key\ ht
comment6.target=java.lang.Object\ search(BTree.Node,\ java.lang.Comparable,\ int)
comment7.params=key\ val
comment7.target=void\ put(java.lang.Comparable,\ java.lang.Object)
comment7.text=\r\n\ Inserts\ the\ key-value\ pair\ into\ the\ symbol\ table,\ overwriting\ the\ old\ value\r\n\ with\ the\ new\ value\ if\ the\ key\ is\ already\ in\ the\ symbol\ table.\r\n\ If\ the\ value\ is\ {@code\ null},\ this\ effectively\ deletes\ the\ key\ from\ the\ symbol\ table.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @param\ \ val\ the\ value\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment8.params=h\ key\ val\ ht
comment8.target=BTree.Node\ insert(BTree.Node,\ java.lang.Comparable,\ java.lang.Object,\ int)
comment9.params=h
comment9.target=BTree.Node\ split(BTree.Node)
numComments=15
